plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'it.fulminazzo'
version = '1.0'

allprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'maven-publish'

    def author = "Fulminazzo"
    group = "${rootProject.group}"
    version = "${rootProject.version}"

    repositories {
        mavenCentral()
        maven {
            name = "spigotmc-repo"
            url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public/"
        }
        maven {
            name = "Jitpack"
            url = 'https://jitpack.io'
        }
        maven {
            name = "PlaceholderAPI"
            url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
        }
        maven {
            name = "MMOItems repo"
            url = "https://mvn.lumine.io/repository/maven-public/"
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'

        compileOnly 'org.spigotmc:spigot-api:1.20.2-R0.1-SNAPSHOT'
        /*
            ENDER DRAGON EVENT
         */
        //compileOnly 'org.spigotmc:spigot-api:1.16.2-R0.1-SNAPSHOT'
        /*
            GIVE EVENT
         */
        // Actually 1.8.8, missing method are being checked
        //compileOnly 'org.spigotmc:spigot-api:1.14.4-R0.1-SNAPSHOT'

        compileOnly 'net.kyori:adventure-text-serializer-legacy:4.15.0'
        compileOnly 'net.kyori:adventure-text-minimessage:4.15.0'

        compileOnly 'com.github.LoneDev6:API-ItemsAdder:3.6.1'

        implementation("com.github.Fulminazzo:FulmiCollection:1.1")
        implementation("com.github.Fulminazzo:YAMLParser:1.2")

        if ("${project.name}".toString() != "common") implementation(this.project(":common"))
    }

    processResources {
        def props = [
                version: project.version, name: project.name,
                author: author, group: project.group, module: project.name,
                libraries: ["org.yaml:snakeyaml:2.2"]
        ]
        inputs.properties(props)
        filteringCharset 'UTF-8'
        expand props
    }

    shadowJar {
        exclude("META-INF/**") // Removes all Maven META-INF/ files.
        exclude("original-*")
        archiveFileName = "${project.name}-${version}.jar"

        relocate("it.fulminazzo.", "it.fulminazzo.${project.name.toLowerCase()}.") {
            exclude("it.fulminazzo.${project.name.toLowerCase()}.**")
        }

        dependencies {
            exclude(dependency("org.yaml:snakeyaml:2.2"))
        }
    }

    jar {
        enabled = true // Required for sub projects depending on sub projects
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        archiveFileName = "${project.name}-${version}-original.jar"
        dependsOn(processResources)
        dependsOn(shadowJar)
    }

    build {
        dependsOn(publishToMavenLocal)
    }

    tasks.register('sourcesJar', Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    tasks.register('javadocJar', Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    publishing {
        publications {
            maven(MavenPublication) {
                String projectName = "${project.name}"
                String rootProjectName = "${rootProject.name}"
                groupId = "${rootProject.group}" + (projectName == rootProjectName ? "" : ".${rootProjectName}")
                artifactId = "${project.name}"
                version = "${rootProject.version}"

                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
}

assemble {
    try {
        def proc = new ProcessBuilder("/usr/bin/python3", "parse-resources.py")
        proc.start().waitFor()
    } catch (Exception e) {
        e.printStackTrace()
    }
}

dependencies {
    subprojects.each {implementation project(it.path)}
}

shadowJar {
    subprojects.each {exclude("it/fulminazzo/${it.name.toLowerCase()}/${it.name}.class")}
}